{
  "name": "imbalanced_data_extension",
  "id": "imbalanced_data_extension",
  "description": "",
  "created_on": "05/06/2023, 14:06:03",
  "last_modify": "04/08/2023, 10:43:24",
  "graphs": {
    "main": {
      "nodes": [
        {
          "id": "c52f1de4-d75d-4796-84d3-cb395936e12d",
          "position": {
            "x": 486.01359522289965,
            "y": 233.46601194275095
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Trigger",
            "events": null,
            "description": "### Description\nThe TRIGGER component is used to start streams.\n\n### Output\nThe parameter Type can be set as a **String** or an **Object**. The parameter Value, on the other hand, defines the actual output of the component.",
            "inputs": [],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "type",
                  "type": "select",
                  "description": "The type of data",
                  "label": "Type",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": [
                    "String",
                    "Object"
                  ],
                  "value": null
                },
                {
                  "name": "value",
                  "type": "dynamic",
                  "dynamicType": {
                    "String": "area",
                    "Object": "code"
                  },
                  "parent": "type",
                  "label": "Value",
                  "validation": {
                    "required": "Required field"
                  }
                }
              ],
              "click": "Send message",
              "icon": "RiPlayFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "type": "String",
                "value": "{'X': [[-1.7366341129676215, 0.9907942161730856, -1.1242975858088005, 2.142370500725036, 3.594971042038561], [-1.106338960637796, 1.3838473697404834, -1.3309730123224757, 0.9733120627036731, 3.4343219042341557], [0.1647325863827751, -0.04860033805998142, -0.04824884696142018, 2.1226388933521085, 3.4686477454802764], [1.3176634898515545, 1.0632112103062443, -1.286942429614221, 2.2853897188063534, 2.8795882742341528], [-1.0966718107961326, 0.06586792040048142, -0.1231090685940961, 1.331624480877942, 2.265256153793383], [1.0360075449458814, 3.0385097303925153, -3.321012673609258, 1.0127354251092573, 0.38754830082414493], [1.1467056135070663, 0.34096801020857354, -0.5181939567552367, 2.1019882382503376, 2.6692763813182294], [0.5972705812263174, 1.2877706349034252, -1.8534246613721663, 1.9142676109425178, -1.849670551691171], [0.43754969604221855, 1.2611682254027945, -1.9606625409144618, 4.579625739305447, 2.378771128181627], [0.8779155744391827, 2.0455697953142598, -2.2620771528863832, 2.0856676207952423, 3.0157057394308877], [0.26702940910761847, 1.8701838364351546, -2.291410968737453, 2.7910130289904185, 2.055646957348672], [0.5183425800024786, 0.5391936082991337, -0.7372008925521396, 1.6855581314293346, 1.6134096352100142], [-0.41931019417312404, 1.6655970971244443, -2.5135709149954026, 4.791090060517598, 1.2907976757589457], [-1.1291693421591253, 2.244540575326654, -2.7764516284856064, 3.383502327897795, 2.2301560376975447], [-0.802527921619948, 2.6531102739984287, -3.0432773327432483, 1.9972944810399704, 1.0769924368635055], [-0.6620065023878279, 2.0118562549724173, -2.5696180149022023, 3.6774806291362063, 2.4519296548155323], [1.4484321471517312, -0.5645898956337423, 0.4337093574034503, 2.871177387710116, 4.445975985002146], [-1.7961037022935096, 1.3050943052250328, -1.7205395255548825, 3.075994447392192, 2.4658440388937457], [-0.8011603908624186, 2.215789913485146, -2.6987899924229266, 3.03051042492546, 2.0217453896838737], [-0.9361418721617686, 1.6823826957826276, -1.8675896714657458, 2.002563352873895, 3.0231549516329546], [0.14952985358122942, 2.846965181874937, -3.27282774953442, 2.150315993281689, 1.0864372547985517], [0.3482483626000679, 2.2853171132577375, -2.917079269729007, 1.6699801391587559, -2.667703285483548], [-0.6909844440211002, 1.879262889334831, -2.2370603142350305, 2.534319997653335, 2.2473744275922827], [1.1666979600441854, 1.0683147657341747, -1.536384181132071, 3.0270821037918836, 1.6213742065024794], [-0.22818033411647398, -0.15072520271894146, 0.21504289179318015, 0.9671498642747431, 2.7949667932242868], [-1.1964077764773868, 0.9707779714588491, -1.563720487757924, 2.1880852331256904, -1.730657992204676], [0.6671780343725168, 1.9937944212356207, -2.5258455883031896, 3.634775112091824, 2.652793549774231], [-0.7611416430884058, 0.5779080928273989, -0.8572013191961241, 2.603431954747709, 2.678447042219925], [-1.3102655824951208, 2.115181563656811, -2.289563753943121, 1.3353066668060973, 1.9085039708217557], [-0.7802597953216389, 0.43999546295668873, -0.4897979767496241, 1.4193747366643252, 2.7299999568262705], [0.5774661686615532, 2.685094197131085, -3.085835372918371, 2.041773415401615, 1.06531958511912], [-0.8289742099525413, 3.2838538690188033, -3.4753963996514967, 0.8558456993444314, 1.2388173386251276], [0.17595750241833533, 1.8236094152910212, -2.289506441011033, 2.865034684783054, 1.6676331638521966], [-1.227723719027227, 2.6835822014192408, -3.0274270984507283, 2.5275340542039593, 2.7957732801445783], [-0.48421858561839676, 1.9144856314269858, -2.5684744820821437, 2.465082519936715, -1.3776044024553995], [-1.9075155118427058, 1.094814928395107, -1.0294939307799402, 0.39505445779784165, 2.175240188844111], [-0.5894709930293909, -1.367588681509585, 1.5339060964859272, 1.3347257509890442, 4.196506129858039], [0.5286321050552957, 0.7526285245274791, -0.6804217612960275, 0.9247485457240758, 3.2432335593627535], [-0.14823937578406077, 1.443558239933767, -2.052061367060162, 1.6867950381757975, -2.774146162301455], [0.14137642139098539, 0.6727285347874025, -1.2830165823466368, 2.703758711344931, -0.9570138921000242], [-1.132045930623274, 0.3967733818970589, -0.6430258577145087, 2.9396936418221635, 3.712260834073443], [-0.9111816352949452, 3.8472532818839356, -4.18778151537596, 1.3334310126308786, 0.8047070680750359], [0.48005349785481705, 0.2763819946193559, -0.4219647926469621, 1.6368649160221103, 1.994745205355003], [-0.28608478721742214, 0.5228052236738647, -0.7116280663985701, 2.1973547708515144, 2.830941849703625], [-0.6132205677643481, 0.8040288374502668, -1.2324834145734123, 3.4419740014034743, 2.863127009768058], [1.5478256093473444, 0.934566376502147, -1.2654224466001254, 3.274935786217056, 3.7135667125532006], [0.21527360957341662, 1.4259613781198195, -1.4830757093792526, 1.0171413300936027, 2.254430556462289], [1.500267650318621, 1.6308498952234656, -2.0208636874801593, 2.426538597917244, 1.5091609385222893], [0.026113731373773142, 0.4467204925452311, -0.8660548310064513, 3.916789592229031, 3.8301463084668232], [0.1866794266296578, 2.8840367769216226, -3.156378025206676, 1.2294589831377667, 0.9039136026937169], [-1.33645467606587, 1.700900131840233, -1.8570163201249608, 1.1186218385753608, 1.4453388017403772], [1.759810625407389, -0.5523920189487858, 0.520478225558767, 1.6093323307132221, 2.863599559021794], [-0.27961241430071343, 2.4673947840391053, -2.921548858217622, 2.323357914523304, 0.9425811472626855], [-0.4048189172132202, 1.1205870296908476, -1.334700032158911, 2.1173695963526296, 2.654569477483843], [-1.4481361642866966, 2.1992724835751574, -2.4949492188660956, 2.0825483558456543, 2.1519083081662176], [-0.30383972221341693, 2.996352154137941, -3.142935990220236, 0.8299854646713223, 1.5697623495930142], [-2.151943350276413, 4.840089375525923, -5.201699104091004, 0.6685664369596287, -0.4031613433559631], [-1.2874726660101392, 0.06007138755906032, -0.27378222825146636, 2.5279161460499444, 3.0298840508526563], [0.13161707271245496, 2.467835922035054, -2.9912370357399203, 2.983186835915044, 1.5671637384289838], [-0.9985862230054936, 2.841692716651818, -3.415661337298066, 3.3510812666413043, 1.9596762531487695]], 'y': [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}\n"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 486.01359522289965,
            "y": 233.46601194275095
          },
          "__class__": "Node"
        },
        {
          "id": "e31c24ca-9a95-4c07-889f-b17ee531eb65",
          "position": {
            "x": 717,
            "y": 251
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Imbalanced Data",
            "events": null,
            "description": "#### Imbalanced Data",
            "inputs": [
              {
                "id": "balancing",
                "label": "Balancing",
                "service": "balance",
                "to": "balancing"
              }
            ],
            "outputs": [
              {
                "id": "balancing",
                "label": "Balancing"
              }
            ],
            "configured": true,
            "options": {
              "group": "Custom",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "method",
                  "type": "select",
                  "label": "Sampling Method",
                  "helper": "",
                  "group": "",
                  "value": "undersampling",
                  "description": "",
                  "validation": null,
                  "options": [
                    "undersampling",
                    "oversampling",
                    "SMOTE"
                  ]
                },
                {
                  "name": "random_state",
                  "type": "number",
                  "label": "Random State",
                  "helper": "",
                  "group": "",
                  "value": 123,
                  "description": "",
                  "validation": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"undersampling\"",
                  "dynamicType": "select",
                  "options": [
                    "auto",
                    "majority",
                    "not majority",
                    "not minority",
                    "all"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "replacement",
                  "type": "dynamic",
                  "label": "Sample with raplacement",
                  "helper": "",
                  "group": "",
                  "value": false,
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"undersampling\"",
                  "dynamicType": "boolean",
                  "options": null,
                  "fields": null,
                  "url": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"oversampling\"",
                  "dynamicType": "select",
                  "options": [
                    "all",
                    "auto",
                    "not minority",
                    "not majority",
                    "minority"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTE\"",
                  "dynamicType": "select",
                  "options": [
                    "all",
                    "auto",
                    "not minority",
                    "not majority",
                    "minority"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "k_neighbors",
                  "type": "dynamic",
                  "label": "K neighbors",
                  "helper": "",
                  "group": "",
                  "value": 5,
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTE\"",
                  "dynamicType": "number",
                  "options": null,
                  "fields": null,
                  "url": null
                }
              ],
              "click": null,
              "icon": "RiScales3Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "method": "undersampling",
                "random_state": "12356",
                "sampling_strategy": "auto",
                "replacement": false
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "__class__": "Node"
        },
        {
          "id": "007df25a-0c9d-4e92-a652-919b5f62684d",
          "position": {
            "x": 726,
            "y": 464
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Grouper",
            "events": null,
            "description": "### Description\nThe GROUPER component is used to group the elements received in input. The items will be returned in batches with a maximum size equal to **Group size**.\n\n### Input\nIn this case there is no fixed input format.\n\n### Output\nIn output lists of elements received in input with a maximum length equal to **Group size**.",
            "inputs": [
              {
                "id": "input",
                "label": "input",
                "closed": false
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "n",
                  "label": "Group size",
                  "type": "number"
                }
              ],
              "click": null,
              "icon": "RiGroupFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "n": "100000"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 726,
            "y": 464
          },
          "__class__": "Node"
        },
        {
          "id": "846a6f32-ac27-43fd-a7d3-41d23d94e00a",
          "position": {
            "x": 1527.0309648099635,
            "y": 208.87575581182136
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Imbalanced Data",
            "events": null,
            "description": "#### Imbalanced Data",
            "inputs": [
              {
                "id": "balancing",
                "label": "Balancing",
                "service": "balance",
                "to": "balancing"
              }
            ],
            "outputs": [
              {
                "id": "balancing",
                "label": "Balancing"
              }
            ],
            "configured": true,
            "options": {
              "group": "Custom",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "method",
                  "type": "select",
                  "label": "Sampling Method",
                  "helper": "",
                  "group": "",
                  "value": "undersampling",
                  "description": "",
                  "validation": null,
                  "options": [
                    "undersampling",
                    "oversampling",
                    "SMOTE"
                  ]
                },
                {
                  "name": "random_state",
                  "type": "number",
                  "label": "Random State",
                  "helper": "",
                  "group": "",
                  "value": 123,
                  "description": "",
                  "validation": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"undersampling\"",
                  "dynamicType": "select",
                  "options": [
                    "auto",
                    "majority",
                    "not majority",
                    "not minority",
                    "all"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "replacement",
                  "type": "dynamic",
                  "label": "Sample with raplacement",
                  "helper": "",
                  "group": "",
                  "value": false,
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"undersampling\"",
                  "dynamicType": "boolean",
                  "options": null,
                  "fields": null,
                  "url": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"oversampling\"",
                  "dynamicType": "select",
                  "options": [
                    "all",
                    "auto",
                    "not minority",
                    "not majority",
                    "minority"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTE\"",
                  "dynamicType": "select",
                  "options": [
                    "all",
                    "auto",
                    "not minority",
                    "not majority",
                    "minority"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "k_neighbors",
                  "type": "dynamic",
                  "label": "K neighbors",
                  "helper": "",
                  "group": "",
                  "value": 5,
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTE\"",
                  "dynamicType": "number",
                  "options": null,
                  "fields": null,
                  "url": null
                }
              ],
              "click": null,
              "icon": "RiScales3Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "method": "undersampling",
                "random_state": "123",
                "sampling_strategy": "auto",
                "replacement": false
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1527.0309648099635,
            "y": 208.87575581182136
          },
          "__class__": "Node"
        },
        {
          "id": "dfb7d559-1b5e-4364-bdac-6bbee9c74888",
          "position": {
            "x": 459.2995396478001,
            "y": 450.0900630097718
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "CSV Reader",
            "events": null,
            "description": "### Description\nThe CSV READER component allows reading files in csv format. \n\nYou have the possibility to set a separator using the **Separator** parameter. The **Infer types** parameter allows the automatic transformation of the type of non-textual fields.\n\n### Input\nThe input required by this component is the file path in PosixPath format. However, the file path can also be defined when the component is created, in which case no input is required.\n\n### Output\nThe submitted file is returned row by row, where each row is represented by a dictionary that has the column names as keys.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Inputs",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "value",
                  "type": "files",
                  "label": "File",
                  "fragment": "files",
                  "helper": "choose a file or read input"
                },
                {
                  "name": "separator",
                  "type": "text",
                  "label": "Separator"
                },
                {
                  "name": "df",
                  "type": "boolean",
                  "label": "Dask Dataframe"
                },
                {
                  "name": "infer_type",
                  "type": "boolean",
                  "label": "Infer types"
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                }
              ],
              "click": "Send file",
              "icon": "RiFileChart2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "separator": ",",
                "df": false,
                "infer_type": false,
                "propagate": false,
                "value": {
                  "name": "iris.csv",
                  "path": "data/data/iris.csv",
                  "parent": "data/data",
                  "isDir": false,
                  "hidden": false
                }
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 459.2995396478001,
            "y": 450.0900630097718
          },
          "__class__": "Node"
        },
        {
          "id": "fa3ace84-a325-46a7-a66c-b769a2dc13d6",
          "position": {
            "x": 1271,
            "y": 474
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 60,
          "selected": false,
          "dragging": false,
          "data": {
            "microservice": "predictor",
            "name": "Predictor",
            "events": {
              "type": "predictor",
              "field": "predictor"
            },
            "description": "### Description\nThe PREDICTOR component is one of the most sophisticated in Loko AI, and deals with the training, prediction and evaluation of ML models. \n\nIts configuration and function in the flow are described below to give the user a general understanding of how this can be used.\n\n### Input\nTo transmit the data of the PREDICTOR component as input, you can operate in two ways, choosing to set the parameter **Stream Data** to **True** or **False**.\n\nIn the first case it is possible to pass the samples one at a time: in this way the data will be passed as dictionaries:\n```json\n{\"data\": {\"text\":\"Today is a beautiful day\"}, \"target\": \"class01\"}\n```\n\nIn the second case, ie by setting this parameter as False, the data will be transmitted all at once as a list of dictionaries:\n```json\n{\"data\": [{\"text\":\"Today is a beautiful day\"}, {\"text\":\"Today is a bad day\"}], \"target\": [\"class01\",\"class02\"]}\n```\n\nAnother parameter related to data input is target.\n\nBy setting the name of the target variable, there is no need to split the variables into date and target.\n\nSupposing to read a line of a csv as:\n```json\n{\"text\":\"Today is a beautiful day\", \"label\": \"class01\"}\n```\n\nsetting the target variable to label, the PREDICTOR component will automatically interpret all variables other than the target variable as explanatory and the variable label as the response variable. In this way it is not necessary to divide the data in the two keys before hand data and target.\n\nAs for fit and evaluate of PREDICTOR, it is necessary to supply both the variable data and the variable target.\n\nConversely, as far as concerned Predict is, the target variable is not required.\n\n### Output\nThe output of theservice fit will only provide as response: Job submitted.\n\nThis means that the PREDICTOR training has started correctly. You will be able to check the results obtained through the appropriate dashboard.\n\nAs for the predict, the output is the following:\n```json\n{\"prediction\": \"class01\", \"object\": {\"text\":\"Today is a beautiful day\"}}\n```\n\nFinally, the evaluate has a more complex:\n```json\n{\"tdist\": distribution of the target variable provided\n \"report_test\": metrics used for the evaluation of the model (vary according to the task)\n \"datetime\": date and time\n \"task\": classification or regression\n}\n```",
            "inputs": [
              {
                "id": "fit",
                "label": "fit",
                "closed": false
              },
              {
                "id": "predict",
                "label": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate"
              }
            ],
            "outputs": [
              {
                "id": "fit",
                "label": "fit"
              },
              {
                "id": "predict",
                "label": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate"
              }
            ],
            "configured": true,
            "options": {
              "group": "DS4Biz",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "service",
                  "type": "service",
                  "label": "Available services",
                  "fragment": "predictor",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "predictor",
                  "type": "dynamic",
                  "dynamicType": "dependent",
                  "parent": "service",
                  "label": "Predictors",
                  "fragment": "predictors",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "stream",
                  "type": "boolean",
                  "label": "Stream data"
                },
                {
                  "name": "target_y",
                  "type": "text",
                  "label": "Target name",
                  "helper": "Name of the features you want to estimate, if not specified the default feature name is \"target\""
                },
                {
                  "name": "partial_fit",
                  "type": "boolean",
                  "label": "Partial fit",
                  "group": "Fit parameters"
                },
                {
                  "name": "save_dataset",
                  "type": "select",
                  "options": [
                    "yes",
                    "no"
                  ],
                  "label": "Save dataset",
                  "helper": "save testset to compute the metrics report for partial fit task",
                  "group": "Fit parameters"
                },
                {
                  "name": "report",
                  "type": "boolean",
                  "label": "Compute metrics report",
                  "group": "Fit parameters"
                },
                {
                  "name": "test_size",
                  "type": "dynamic",
                  "dynamicType": "select",
                  "parent": "report",
                  "condition": "{parent}===true",
                  "options": [
                    0.1,
                    0.2,
                    0.3,
                    0.4,
                    0.5
                  ],
                  "label": "Test size",
                  "group": "Fit parameters"
                },
                {
                  "name": "cv",
                  "dynamicType": "select",
                  "parent": "report",
                  "condition": "{parent}===true",
                  "type": "select",
                  "options": [
                    0,
                    2,
                    3,
                    4,
                    5
                  ],
                  "label": "Number of folds used for cross-validation",
                  "group": "Fit parameters"
                },
                {
                  "name": "history_limit",
                  "type": "select",
                  "options": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ],
                  "label": "Number of models to keep saved",
                  "group": "Fit parameters"
                },
                {
                  "name": "fit_params",
                  "type": "area",
                  "label": "Additional fit parameters",
                  "group": "Fit parameters"
                },
                {
                  "name": "include_probs",
                  "type": "boolean",
                  "label": "Predict proba",
                  "group": "Predict parameters"
                },
                {
                  "name": "predict_branch",
                  "type": "select",
                  "options": [
                    "development",
                    "master"
                  ],
                  "label": "Branch",
                  "helper": "fit task automatically saves model on development branch",
                  "group": "Predict parameters"
                },
                {
                  "name": "limit",
                  "type": "select",
                  "options": [
                    -1,
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ],
                  "label": "Limit",
                  "helper": "set to 0 to evalute only last model, set to -1 to evaluate all models in history",
                  "group": "Evaluate parameters"
                },
                {
                  "name": "eval_branch",
                  "type": "select",
                  "options": [
                    "development",
                    "master"
                  ],
                  "label": "Branch",
                  "helper": "fit task automatically saves model on development branch",
                  "group": "Evaluate parameters"
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                }
              ],
              "click": null,
              "icon": "RiTyphoonFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "stream": false,
                "target_y": "target",
                "propagate": true,
                "partial_fit": false,
                "save_dataset": "no",
                "report": true,
                "cv": "0",
                "history_limit": "0",
                "fit_params": "{}",
                "include_probs": false,
                "predict_branch": "development",
                "limit": "0",
                "eval_branch": "development",
                "test_size": "0.2",
                "service": "predictor",
                "predictor": "iris_balanced"
              }
            },
            "disabled": false,
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1271,
            "y": 474
          },
          "__class__": "Node"
        },
        {
          "id": "2a92af27-18ad-4281-8def-731c1b7a5c1f",
          "position": {
            "x": 1231,
            "y": 697
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Grouper",
            "events": null,
            "description": "### Description\nThe GROUPER component is used to group the elements received in input. The items will be returned in batches with a maximum size equal to **Group size**.\n\n### Input\nIn this case there is no fixed input format.\n\n### Output\nIn output lists of elements received in input with a maximum length equal to **Group size**.",
            "inputs": [
              {
                "id": "input",
                "label": "input",
                "closed": false
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "n",
                  "label": "Group size",
                  "type": "number"
                }
              ],
              "click": null,
              "icon": "RiGroupFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "n": "100000"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1231,
            "y": 697
          },
          "__class__": "Node"
        },
        {
          "id": "f85db464-7c7d-47cb-8cad-5846a1d089ec",
          "position": {
            "x": 718.2995396478001,
            "y": 685.789700844743
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "CSV Reader",
            "events": null,
            "description": "### Description\nThe CSV READER component allows reading files in csv format. \n\nYou have the possibility to set a separator using the **Separator** parameter. The **Infer types** parameter allows the automatic transformation of the type of non-textual fields.\n\n### Input\nThe input required by this component is the file path in PosixPath format. However, the file path can also be defined when the component is created, in which case no input is required.\n\n### Output\nThe submitted file is returned row by row, where each row is represented by a dictionary that has the column names as keys.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Inputs",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "value",
                  "type": "files",
                  "label": "File",
                  "fragment": "files",
                  "helper": "choose a file or read input"
                },
                {
                  "name": "separator",
                  "type": "text",
                  "label": "Separator"
                },
                {
                  "name": "df",
                  "type": "boolean",
                  "label": "Dask Dataframe"
                },
                {
                  "name": "infer_type",
                  "type": "boolean",
                  "label": "Infer types"
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                }
              ],
              "click": "Send file",
              "icon": "RiFileChart2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "separator": "\u00a3",
                "df": false,
                "infer_type": false,
                "propagate": false,
                "value": {
                  "name": "email_train.csv",
                  "path": "data/data/email_train.csv",
                  "parent": "data/data",
                  "isDir": false,
                  "hidden": false
                }
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 718.2995396478001,
            "y": 685.789700844743
          },
          "__class__": "Node"
        },
        {
          "id": "fe718156-005e-4764-b172-df0a3f4cb425",
          "position": {
            "x": 1558,
            "y": 668.891310495897
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Imbalanced Data",
            "events": null,
            "description": "#### Imbalanced Data",
            "inputs": [
              {
                "id": "balancing",
                "label": "Balancing",
                "service": "balance",
                "to": "balancing"
              }
            ],
            "outputs": [
              {
                "id": "balancing",
                "label": "Balancing"
              }
            ],
            "configured": true,
            "options": {
              "group": "Custom",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "target",
                  "type": "text",
                  "label": "Target Variable Name",
                  "helper": "",
                  "group": "",
                  "value": "target",
                  "description": "",
                  "validation": null
                },
                {
                  "name": "method",
                  "type": "select",
                  "label": "Sampling Method",
                  "helper": "",
                  "group": "",
                  "value": "undersampling",
                  "description": "",
                  "validation": null,
                  "options": [
                    "undersampling",
                    "oversampling",
                    "SMOTE",
                    "SMOTEN"
                  ]
                },
                {
                  "name": "random_state",
                  "type": "number",
                  "label": "Random State",
                  "helper": "",
                  "group": "",
                  "value": 123,
                  "description": "",
                  "validation": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"undersampling\"",
                  "dynamicType": "select",
                  "options": [
                    "auto",
                    "majority",
                    "not majority",
                    "not minority",
                    "all"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "replacement",
                  "type": "dynamic",
                  "label": "Sample with raplacement",
                  "helper": "",
                  "group": "",
                  "value": false,
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"undersampling\"",
                  "dynamicType": "boolean",
                  "options": null,
                  "fields": null,
                  "url": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"oversampling\"",
                  "dynamicType": "select",
                  "options": [
                    "all",
                    "auto",
                    "not minority",
                    "not majority",
                    "minority"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTE\"",
                  "dynamicType": "select",
                  "options": [
                    "all",
                    "auto",
                    "not minority",
                    "not majority",
                    "minority"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "k_neighbors",
                  "type": "dynamic",
                  "label": "K neighbors",
                  "helper": "",
                  "group": "",
                  "value": 5,
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTE\"",
                  "dynamicType": "number",
                  "options": null,
                  "fields": null,
                  "url": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTEN\"",
                  "dynamicType": "select",
                  "options": [
                    "all",
                    "auto",
                    "not minority",
                    "not majority",
                    "minority"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "k_neighbors",
                  "type": "dynamic",
                  "label": "K neighbors",
                  "helper": "",
                  "group": "",
                  "value": 5,
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTEN\"",
                  "dynamicType": "number",
                  "options": null,
                  "fields": null,
                  "url": null
                }
              ],
              "click": null,
              "icon": "RiScales3Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "target": "Classificazione",
                "method": "SMOTEN",
                "random_state": "123",
                "sampling_strategy": "auto",
                "k_neighbors": "5"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1558,
            "y": 668.891310495897
          },
          "__class__": "Node"
        },
        {
          "id": "2ea32ed5-f0ae-4465-8955-2d86d6d01707",
          "position": {
            "x": 1971,
            "y": 708.8281706613346
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 60,
          "selected": false,
          "dragging": false,
          "data": {
            "microservice": "predictor",
            "name": "Predictor",
            "events": {
              "type": "predictor",
              "field": "predictor"
            },
            "description": "### Description\nThe PREDICTOR component is one of the most sophisticated in Loko AI, and deals with the training, prediction and evaluation of ML models. \n\nIts configuration and function in the flow are described below to give the user a general understanding of how this can be used.\n\n### Input\nTo transmit the data of the PREDICTOR component as input, you can operate in two ways, choosing to set the parameter **Stream Data** to **True** or **False**.\n\nIn the first case it is possible to pass the samples one at a time: in this way the data will be passed as dictionaries:\n```json\n{\"data\": {\"text\":\"Today is a beautiful day\"}, \"target\": \"class01\"}\n```\n\nIn the second case, ie by setting this parameter as False, the data will be transmitted all at once as a list of dictionaries:\n```json\n{\"data\": [{\"text\":\"Today is a beautiful day\"}, {\"text\":\"Today is a bad day\"}], \"target\": [\"class01\",\"class02\"]}\n```\n\nAnother parameter related to data input is target.\n\nBy setting the name of the target variable, there is no need to split the variables into date and target.\n\nSupposing to read a line of a csv as:\n```json\n{\"text\":\"Today is a beautiful day\", \"label\": \"class01\"}\n```\n\nsetting the target variable to label, the PREDICTOR component will automatically interpret all variables other than the target variable as explanatory and the variable label as the response variable. In this way it is not necessary to divide the data in the two keys before hand data and target.\n\nAs for fit and evaluate of PREDICTOR, it is necessary to supply both the variable data and the variable target.\n\nConversely, as far as concerned Predict is, the target variable is not required.\n\n### Output\nThe output of theservice fit will only provide as response: Job submitted.\n\nThis means that the PREDICTOR training has started correctly. You will be able to check the results obtained through the appropriate dashboard.\n\nAs for the predict, the output is the following:\n```json\n{\"prediction\": \"class01\", \"object\": {\"text\":\"Today is a beautiful day\"}}\n```\n\nFinally, the evaluate has a more complex:\n```json\n{\"tdist\": distribution of the target variable provided\n \"report_test\": metrics used for the evaluation of the model (vary according to the task)\n \"datetime\": date and time\n \"task\": classification or regression\n}\n```",
            "inputs": [
              {
                "id": "fit",
                "label": "fit"
              },
              {
                "id": "predict",
                "label": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate"
              }
            ],
            "outputs": [
              {
                "id": "fit",
                "label": "fit"
              },
              {
                "id": "predict",
                "label": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate"
              }
            ],
            "configured": true,
            "options": {
              "group": "DS4Biz",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "service",
                  "type": "service",
                  "label": "Available services",
                  "fragment": "predictor",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "predictor",
                  "type": "dynamic",
                  "dynamicType": "dependent",
                  "parent": "service",
                  "label": "Predictors",
                  "fragment": "predictors",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "stream",
                  "type": "boolean",
                  "label": "Stream data"
                },
                {
                  "name": "target_y",
                  "type": "text",
                  "label": "Target name",
                  "helper": "Name of the features you want to estimate, if not specified the default feature name is \"target\""
                },
                {
                  "name": "partial_fit",
                  "type": "boolean",
                  "label": "Partial fit",
                  "group": "Fit parameters"
                },
                {
                  "name": "save_dataset",
                  "type": "select",
                  "options": [
                    "yes",
                    "no"
                  ],
                  "label": "Save dataset",
                  "helper": "save testset to compute the metrics report for partial fit task",
                  "group": "Fit parameters"
                },
                {
                  "name": "report",
                  "type": "boolean",
                  "label": "Compute metrics report",
                  "group": "Fit parameters"
                },
                {
                  "name": "test_size",
                  "type": "dynamic",
                  "dynamicType": "select",
                  "parent": "report",
                  "condition": "{parent}===true",
                  "options": [
                    0.1,
                    0.2,
                    0.3,
                    0.4,
                    0.5
                  ],
                  "label": "Test size",
                  "group": "Fit parameters"
                },
                {
                  "name": "cv",
                  "dynamicType": "select",
                  "parent": "report",
                  "condition": "{parent}===true",
                  "type": "select",
                  "options": [
                    0,
                    2,
                    3,
                    4,
                    5
                  ],
                  "label": "Number of folds used for cross-validation",
                  "group": "Fit parameters"
                },
                {
                  "name": "history_limit",
                  "type": "select",
                  "options": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ],
                  "label": "Number of models to keep saved",
                  "group": "Fit parameters"
                },
                {
                  "name": "fit_params",
                  "type": "area",
                  "label": "Additional fit parameters",
                  "group": "Fit parameters"
                },
                {
                  "name": "include_probs",
                  "type": "boolean",
                  "label": "Predict proba",
                  "group": "Predict parameters"
                },
                {
                  "name": "predict_branch",
                  "type": "select",
                  "options": [
                    "development",
                    "master"
                  ],
                  "label": "Branch",
                  "helper": "fit task automatically saves model on development branch",
                  "group": "Predict parameters"
                },
                {
                  "name": "limit",
                  "type": "select",
                  "options": [
                    -1,
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ],
                  "label": "Limit",
                  "helper": "set to 0 to evalute only last model, set to -1 to evaluate all models in history",
                  "group": "Evaluate parameters"
                },
                {
                  "name": "eval_branch",
                  "type": "select",
                  "options": [
                    "development",
                    "master"
                  ],
                  "label": "Branch",
                  "helper": "fit task automatically saves model on development branch",
                  "group": "Evaluate parameters"
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                }
              ],
              "click": null,
              "icon": "RiTyphoonFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "stream": true,
                "target_y": "Classificazione",
                "propagate": true,
                "partial_fit": false,
                "save_dataset": "no",
                "report": true,
                "cv": "0",
                "history_limit": "0",
                "fit_params": "{}",
                "include_probs": false,
                "predict_branch": "development",
                "limit": "0",
                "eval_branch": "development",
                "test_size": "0.1",
                "service": "predictor",
                "predictor": "reale_smoten"
              }
            },
            "disabled": false,
            "status": "Pipeline END",
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1971,
            "y": 708.8281706613346
          },
          "__class__": "Node"
        },
        {
          "id": "36d9b62d-bad7-4e7b-a04b-d1ac9ed39f0f",
          "position": {
            "x": 983,
            "y": 718
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Selector",
            "events": null,
            "description": "### Description\nThe SELECTOR component is used to select the value of one or more object keys. The required key/s are defined using the parameter **Keys**.\n\nIn order to add other keys you need to click on the **\"Add field\"** button.\n\nIf the field **Ignore Error** is toggled, missing keys are ignored.\n\nIt's also possible to select nested key, just by writing them in a *key* field, and seperating them using a full stop. Let's consider the object in the example below: if you want to have access to the content of the \"key3\" object, you need to use the following notation \"key1.key2.key3\".\n\n\n```json\n {\"key1\":{\"key2\":{\"key3\":[\"val1\", \"val2\", \"val3\"]}}} \n```\n\n\n\n### Input\n\nThe input consists of a dictionary.\n\n\n\n### Output\n\nThe output is the value of the required key of the dictionary received as input, if only one key is selected; otherwise it's an object which contains the keys specified and their value.\n",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "ignore_err",
                  "label": "Ignor Error",
                  "type": "boolean",
                  "description": "Choose whether to ignore error in case of a missing key or not"
                },
                {
                  "name": "exclude",
                  "label": "Exclude Keys",
                  "type": "boolean",
                  "description": "If enabled, the output contains the whole input object excluding the specified keys; otherwise, only the specified keys are returned"
                },
                {
                  "name": "keys",
                  "label": "Keys",
                  "type": "multiKeyValue",
                  "validation": {
                    "required": "Required field"
                  },
                  "description": "Name of the key/s to select from the incoming message",
                  "fields": [
                    {
                      "name": "k",
                      "placeholder": "key",
                      "validation": {
                        "required": "Required field"
                      }
                    }
                  ]
                }
              ],
              "click": null,
              "icon": "RiCursorFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "ignore_err": false,
                "exclude": false,
                "keys": [
                  {
                    "k": "text_to_prediction",
                    "id": "e405fa0c-71f4-4064-bbbd-f0cf43223f01"
                  },
                  {
                    "k": "Classificazione",
                    "id": "5d5bc6bf-c575-4710-8158-8e3242872a9f"
                  }
                ]
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 983,
            "y": 718
          },
          "__class__": "Node"
        },
        {
          "id": "d46c0e1c-bb27-4ac5-9635-58619184e647",
          "position": {
            "x": 1326.8990070247908,
            "y": 881.3898050535927
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "CSV Reader",
            "events": null,
            "description": "### Description\nThe CSV READER component allows reading files in csv format. \n\nYou have the possibility to set a separator using the **Separator** parameter. The **Infer types** parameter allows the automatic transformation of the type of non-textual fields.\n\n### Input\nThe input required by this component is the file path in PosixPath format. However, the file path can also be defined when the component is created, in which case no input is required.\n\n### Output\nThe submitted file is returned row by row, where each row is represented by a dictionary that has the column names as keys.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Inputs",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "value",
                  "type": "files",
                  "label": "File",
                  "fragment": "files",
                  "helper": "choose a file or read input"
                },
                {
                  "name": "separator",
                  "type": "text",
                  "label": "Separator"
                },
                {
                  "name": "df",
                  "type": "boolean",
                  "label": "Dask Dataframe"
                },
                {
                  "name": "infer_type",
                  "type": "boolean",
                  "label": "Infer types"
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                }
              ],
              "click": "Send file",
              "icon": "RiFileChart2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "separator": "\u00a3",
                "df": false,
                "infer_type": false,
                "propagate": false,
                "value": {
                  "name": "email_test.csv",
                  "path": "data/data/email_test.csv",
                  "parent": "data/data",
                  "isDir": false,
                  "hidden": false
                }
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1326.8990070247908,
            "y": 881.3898050535927
          },
          "__class__": "Node"
        },
        {
          "id": "e60b13a1-3f6f-4a85-a938-ca7b1b34b806",
          "position": {
            "x": 1684.7995986029498,
            "y": 836.4001659622421
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Selector",
            "events": null,
            "description": "### Description\nThe SELECTOR component is used to select the value of one or more object keys. The required key/s are defined using the parameter **Keys**.\n\nIn order to add other keys you need to click on the **\"Add field\"** button.\n\nIf the field **Ignore Error** is toggled, missing keys are ignored.\n\nIt's also possible to select nested key, just by writing them in a *key* field, and seperating them using a full stop. Let's consider the object in the example below: if you want to have access to the content of the \"key3\" object, you need to use the following notation \"key1.key2.key3\".\n\n\n```json\n {\"key1\":{\"key2\":{\"key3\":[\"val1\", \"val2\", \"val3\"]}}} \n```\n\n\n\n### Input\n\nThe input consists of a dictionary.\n\n\n\n### Output\n\nThe output is the value of the required key of the dictionary received as input, if only one key is selected; otherwise it's an object which contains the keys specified and their value.\n",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "ignore_err",
                  "label": "Ignor Error",
                  "type": "boolean",
                  "description": "Choose whether to ignore error in case of a missing key or not"
                },
                {
                  "name": "exclude",
                  "label": "Exclude Keys",
                  "type": "boolean",
                  "description": "If enabled, the output contains the whole input object excluding the specified keys; otherwise, only the specified keys are returned"
                },
                {
                  "name": "keys",
                  "label": "Keys",
                  "type": "multiKeyValue",
                  "validation": {
                    "required": "Required field"
                  },
                  "description": "Name of the key/s to select from the incoming message",
                  "fields": [
                    {
                      "name": "k",
                      "placeholder": "key",
                      "validation": {
                        "required": "Required field"
                      }
                    }
                  ]
                }
              ],
              "click": null,
              "icon": "RiCursorFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "ignore_err": false,
                "exclude": false,
                "keys": [
                  {
                    "k": "text_to_prediction",
                    "id": "e405fa0c-71f4-4064-bbbd-f0cf43223f01"
                  },
                  {
                    "k": "Classificazione",
                    "id": "5d5bc6bf-c575-4710-8158-8e3242872a9f"
                  }
                ]
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1684.7995986029498,
            "y": 836.4001659622421
          },
          "__class__": "Node"
        },
        {
          "id": "6bd13d00-6501-404d-a4da-cb18c32b4f35",
          "position": {
            "x": 2368,
            "y": 757
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "File Writer",
            "events": null,
            "description": "### Description\nThe FILE WRITER component allows you to write files. The **Append** parameter allows you to write a file using multiple inputs. The destination path of the file can be defined when creating the block or passed as input in the previous block. In this way you have the possibility to write multiple files using one block.\n\n### Input\nUsing the parameter **Save as**, the format of the data to be received as input is defined. The available formats are: *text*, *bytes* and *json*. To define the destination path of the file instead, the input is defined as:\n```python\nParameters(data = data, path = filename)\n```\n\n### Output\nThe output confirms that the file has been written with the string: **Written to filename**.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Outputs",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "path",
                  "type": "text",
                  "label": "Path"
                },
                {
                  "name": "type",
                  "label": "Save as",
                  "type": "select",
                  "options": [
                    "text",
                    "bytes",
                    "json"
                  ],
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "append",
                  "label": "Append",
                  "type": "dynamic",
                  "dynamicType": "boolean",
                  "condition": "[\"text\", \"bytes\"].includes({parent})",
                  "parent": "type"
                },
                {
                  "name": "overwrite",
                  "type": "dynamic",
                  "dynamicType": {
                    "true": "boolean"
                  },
                  "parent": "append",
                  "label": "Overwrite"
                }
              ],
              "click": null,
              "icon": "RiFileEditFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "path": "data/data/res_reale_dati_nuovi.json",
                "type": "json"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "__class__": "Node"
        },
        {
          "id": "26d2f664-6001-44b6-b8c9-cc45d5f56220",
          "position": {
            "x": 723.2995396478001,
            "y": 1066.789700844743
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "CSV Reader",
            "events": null,
            "description": "### Description\nThe CSV READER component allows reading files in csv format. \n\nYou have the possibility to set a separator using the **Separator** parameter. The **Infer types** parameter allows the automatic transformation of the type of non-textual fields.\n\n### Input\nThe input required by this component is the file path in PosixPath format. However, the file path can also be defined when the component is created, in which case no input is required.\n\n### Output\nThe submitted file is returned row by row, where each row is represented by a dictionary that has the column names as keys.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Inputs",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "value",
                  "type": "files",
                  "label": "File",
                  "fragment": "files",
                  "helper": "choose a file or read input"
                },
                {
                  "name": "separator",
                  "type": "text",
                  "label": "Separator"
                },
                {
                  "name": "df",
                  "type": "boolean",
                  "label": "Dask Dataframe"
                },
                {
                  "name": "infer_type",
                  "type": "boolean",
                  "label": "Infer types"
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                }
              ],
              "click": "Send file",
              "icon": "RiFileChart2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "separator": "\u00a3",
                "df": false,
                "infer_type": false,
                "propagate": false,
                "value": {
                  "name": "email_train.csv",
                  "path": "data/data/email_train.csv",
                  "parent": "data/data",
                  "isDir": false,
                  "hidden": false
                }
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 723.2995396478001,
            "y": 1066.789700844743
          },
          "__class__": "Node"
        },
        {
          "id": "c3196c16-80e5-414e-b660-4702a7557c66",
          "position": {
            "x": 1976,
            "y": 1089
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 60,
          "selected": false,
          "dragging": false,
          "data": {
            "microservice": "predictor",
            "name": "Predictor",
            "events": {
              "type": "predictor",
              "field": "predictor"
            },
            "description": "### Description\nThe PREDICTOR component is one of the most sophisticated in Loko AI, and deals with the training, prediction and evaluation of ML models. \n\nIts configuration and function in the flow are described below to give the user a general understanding of how this can be used.\n\n### Input\nTo transmit the data of the PREDICTOR component as input, you can operate in two ways, choosing to set the parameter **Stream Data** to **True** or **False**.\n\nIn the first case it is possible to pass the samples one at a time: in this way the data will be passed as dictionaries:\n```json\n{\"data\": {\"text\":\"Today is a beautiful day\"}, \"target\": \"class01\"}\n```\n\nIn the second case, ie by setting this parameter as False, the data will be transmitted all at once as a list of dictionaries:\n```json\n{\"data\": [{\"text\":\"Today is a beautiful day\"}, {\"text\":\"Today is a bad day\"}], \"target\": [\"class01\",\"class02\"]}\n```\n\nAnother parameter related to data input is target.\n\nBy setting the name of the target variable, there is no need to split the variables into date and target.\n\nSupposing to read a line of a csv as:\n```json\n{\"text\":\"Today is a beautiful day\", \"label\": \"class01\"}\n```\n\nsetting the target variable to label, the PREDICTOR component will automatically interpret all variables other than the target variable as explanatory and the variable label as the response variable. In this way it is not necessary to divide the data in the two keys before hand data and target.\n\nAs for fit and evaluate of PREDICTOR, it is necessary to supply both the variable data and the variable target.\n\nConversely, as far as concerned Predict is, the target variable is not required.\n\n### Output\nThe output of theservice fit will only provide as response: Job submitted.\n\nThis means that the PREDICTOR training has started correctly. You will be able to check the results obtained through the appropriate dashboard.\n\nAs for the predict, the output is the following:\n```json\n{\"prediction\": \"class01\", \"object\": {\"text\":\"Today is a beautiful day\"}}\n```\n\nFinally, the evaluate has a more complex:\n```json\n{\"tdist\": distribution of the target variable provided\n \"report_test\": metrics used for the evaluation of the model (vary according to the task)\n \"datetime\": date and time\n \"task\": classification or regression\n}\n```",
            "inputs": [
              {
                "id": "fit",
                "label": "fit"
              },
              {
                "id": "predict",
                "label": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate"
              }
            ],
            "outputs": [
              {
                "id": "fit",
                "label": "fit"
              },
              {
                "id": "predict",
                "label": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate"
              }
            ],
            "configured": true,
            "options": {
              "group": "DS4Biz",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "service",
                  "type": "service",
                  "label": "Available services",
                  "fragment": "predictor",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "predictor",
                  "type": "dynamic",
                  "dynamicType": "dependent",
                  "parent": "service",
                  "label": "Predictors",
                  "fragment": "predictors",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "stream",
                  "type": "boolean",
                  "label": "Stream data"
                },
                {
                  "name": "target_y",
                  "type": "text",
                  "label": "Target name",
                  "helper": "Name of the features you want to estimate, if not specified the default feature name is \"target\""
                },
                {
                  "name": "partial_fit",
                  "type": "boolean",
                  "label": "Partial fit",
                  "group": "Fit parameters"
                },
                {
                  "name": "save_dataset",
                  "type": "select",
                  "options": [
                    "yes",
                    "no"
                  ],
                  "label": "Save dataset",
                  "helper": "save testset to compute the metrics report for partial fit task",
                  "group": "Fit parameters"
                },
                {
                  "name": "report",
                  "type": "boolean",
                  "label": "Compute metrics report",
                  "group": "Fit parameters"
                },
                {
                  "name": "test_size",
                  "type": "dynamic",
                  "dynamicType": "select",
                  "parent": "report",
                  "condition": "{parent}===true",
                  "options": [
                    0.1,
                    0.2,
                    0.3,
                    0.4,
                    0.5
                  ],
                  "label": "Test size",
                  "group": "Fit parameters"
                },
                {
                  "name": "cv",
                  "dynamicType": "select",
                  "parent": "report",
                  "condition": "{parent}===true",
                  "type": "select",
                  "options": [
                    0,
                    2,
                    3,
                    4,
                    5
                  ],
                  "label": "Number of folds used for cross-validation",
                  "group": "Fit parameters"
                },
                {
                  "name": "history_limit",
                  "type": "select",
                  "options": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ],
                  "label": "Number of models to keep saved",
                  "group": "Fit parameters"
                },
                {
                  "name": "fit_params",
                  "type": "area",
                  "label": "Additional fit parameters",
                  "group": "Fit parameters"
                },
                {
                  "name": "include_probs",
                  "type": "boolean",
                  "label": "Predict proba",
                  "group": "Predict parameters"
                },
                {
                  "name": "predict_branch",
                  "type": "select",
                  "options": [
                    "development",
                    "master"
                  ],
                  "label": "Branch",
                  "helper": "fit task automatically saves model on development branch",
                  "group": "Predict parameters"
                },
                {
                  "name": "limit",
                  "type": "select",
                  "options": [
                    -1,
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ],
                  "label": "Limit",
                  "helper": "set to 0 to evalute only last model, set to -1 to evaluate all models in history",
                  "group": "Evaluate parameters"
                },
                {
                  "name": "eval_branch",
                  "type": "select",
                  "options": [
                    "development",
                    "master"
                  ],
                  "label": "Branch",
                  "helper": "fit task automatically saves model on development branch",
                  "group": "Evaluate parameters"
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                }
              ],
              "click": null,
              "icon": "RiTyphoonFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "stream": false,
                "target_y": "Classificazione",
                "propagate": true,
                "partial_fit": false,
                "save_dataset": "no",
                "report": true,
                "cv": "0",
                "history_limit": "0",
                "fit_params": "{}",
                "include_probs": false,
                "predict_branch": "development",
                "limit": "0",
                "eval_branch": "development",
                "test_size": "0.2",
                "service": "predictor",
                "predictor": "reale_xgb_man"
              }
            },
            "disabled": false,
            "locked": null,
            "status": "ERROR IN Fitting transformer: A given column is not a column of the dataframe"
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1976,
            "y": 1089
          },
          "__class__": "Node"
        },
        {
          "id": "bd35b6a0-ce50-4c1c-a48c-a16cafe99d17",
          "position": {
            "x": 988,
            "y": 1099
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Selector",
            "events": null,
            "description": "### Description\nThe SELECTOR component is used to select the value of one or more object keys. The required key/s are defined using the parameter **Keys**.\n\nIn order to add other keys you need to click on the **\"Add field\"** button.\n\nIf the field **Ignore Error** is toggled, missing keys are ignored.\n\nIt's also possible to select nested key, just by writing them in a *key* field, and seperating them using a full stop. Let's consider the object in the example below: if you want to have access to the content of the \"key3\" object, you need to use the following notation \"key1.key2.key3\".\n\n\n```json\n {\"key1\":{\"key2\":{\"key3\":[\"val1\", \"val2\", \"val3\"]}}} \n```\n\n\n\n### Input\n\nThe input consists of a dictionary.\n\n\n\n### Output\n\nThe output is the value of the required key of the dictionary received as input, if only one key is selected; otherwise it's an object which contains the keys specified and their value.\n",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "ignore_err",
                  "label": "Ignor Error",
                  "type": "boolean",
                  "description": "Choose whether to ignore error in case of a missing key or not"
                },
                {
                  "name": "exclude",
                  "label": "Exclude Keys",
                  "type": "boolean",
                  "description": "If enabled, the output contains the whole input object excluding the specified keys; otherwise, only the specified keys are returned"
                },
                {
                  "name": "keys",
                  "label": "Keys",
                  "type": "multiKeyValue",
                  "validation": {
                    "required": "Required field"
                  },
                  "description": "Name of the key/s to select from the incoming message",
                  "fields": [
                    {
                      "name": "k",
                      "placeholder": "key",
                      "validation": {
                        "required": "Required field"
                      }
                    }
                  ]
                }
              ],
              "click": null,
              "icon": "RiCursorFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "ignore_err": false,
                "exclude": false,
                "keys": [
                  {
                    "k": "text_to_prediction",
                    "id": "e405fa0c-71f4-4064-bbbd-f0cf43223f01"
                  },
                  {
                    "k": "Classificazione",
                    "id": "5d5bc6bf-c575-4710-8158-8e3242872a9f"
                  }
                ]
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 988,
            "y": 1099
          },
          "__class__": "Node"
        },
        {
          "id": "be1ab6ee-9ca8-423e-9579-fa2cb773ec8a",
          "position": {
            "x": 1576.5995831646017,
            "y": 1219.8001196471976
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Selector",
            "events": null,
            "description": "### Description\nThe SELECTOR component is used to select the value of one or more object keys. The required key/s are defined using the parameter **Keys**.\n\nIn order to add other keys you need to click on the **\"Add field\"** button.\n\nIf the field **Ignore Error** is toggled, missing keys are ignored.\n\nIt's also possible to select nested key, just by writing them in a *key* field, and seperating them using a full stop. Let's consider the object in the example below: if you want to have access to the content of the \"key3\" object, you need to use the following notation \"key1.key2.key3\".\n\n\n```json\n {\"key1\":{\"key2\":{\"key3\":[\"val1\", \"val2\", \"val3\"]}}} \n```\n\n\n\n### Input\n\nThe input consists of a dictionary.\n\n\n\n### Output\n\nThe output is the value of the required key of the dictionary received as input, if only one key is selected; otherwise it's an object which contains the keys specified and their value.\n",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "ignore_err",
                  "label": "Ignor Error",
                  "type": "boolean",
                  "description": "Choose whether to ignore error in case of a missing key or not"
                },
                {
                  "name": "exclude",
                  "label": "Exclude Keys",
                  "type": "boolean",
                  "description": "If enabled, the output contains the whole input object excluding the specified keys; otherwise, only the specified keys are returned"
                },
                {
                  "name": "keys",
                  "label": "Keys",
                  "type": "multiKeyValue",
                  "validation": {
                    "required": "Required field"
                  },
                  "description": "Name of the key/s to select from the incoming message",
                  "fields": [
                    {
                      "name": "k",
                      "placeholder": "key",
                      "validation": {
                        "required": "Required field"
                      }
                    }
                  ]
                }
              ],
              "click": null,
              "icon": "RiCursorFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "ignore_err": false,
                "exclude": false,
                "keys": [
                  {
                    "k": "text_to_prediction",
                    "id": "e405fa0c-71f4-4064-bbbd-f0cf43223f01"
                  },
                  {
                    "k": "Classificazione",
                    "id": "5d5bc6bf-c575-4710-8158-8e3242872a9f"
                  }
                ]
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1576.5995831646017,
            "y": 1219.8001196471976
          },
          "__class__": "Node"
        },
        {
          "id": "c4111051-5fea-461e-9428-b018eae1585c",
          "position": {
            "x": 1355.4990919357053,
            "y": 1200.7897394406134
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "CSV Reader",
            "events": null,
            "description": "### Description\nThe CSV READER component allows reading files in csv format. \n\nYou have the possibility to set a separator using the **Separator** parameter. The **Infer types** parameter allows the automatic transformation of the type of non-textual fields.\n\n### Input\nThe input required by this component is the file path in PosixPath format. However, the file path can also be defined when the component is created, in which case no input is required.\n\n### Output\nThe submitted file is returned row by row, where each row is represented by a dictionary that has the column names as keys.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Inputs",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "value",
                  "type": "files",
                  "label": "File",
                  "fragment": "files",
                  "helper": "choose a file or read input"
                },
                {
                  "name": "separator",
                  "type": "text",
                  "label": "Separator"
                },
                {
                  "name": "df",
                  "type": "boolean",
                  "label": "Dask Dataframe"
                },
                {
                  "name": "infer_type",
                  "type": "boolean",
                  "label": "Infer types"
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                }
              ],
              "click": "Send file",
              "icon": "RiFileChart2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "separator": "\u00a3",
                "df": false,
                "infer_type": false,
                "propagate": false,
                "value": {
                  "name": "email_test.csv",
                  "path": "data/data/email_test.csv",
                  "parent": "data/data",
                  "isDir": false,
                  "hidden": false
                }
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1355.4990919357053,
            "y": 1200.7897394406134
          },
          "__class__": "Node"
        },
        {
          "id": "fd716ad7-6c02-469b-8faf-1b85d64a8c92",
          "position": {
            "x": 1783.4009957734522,
            "y": 1146.999980702065
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Grouper",
            "events": null,
            "description": "### Description\nThe GROUPER component is used to group the elements received in input. The items will be returned in batches with a maximum size equal to **Group size**.\n\n### Input\nIn this case there is no fixed input format.\n\n### Output\nIn output lists of elements received in input with a maximum length equal to **Group size**.",
            "inputs": [
              {
                "id": "input",
                "label": "input",
                "closed": false
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "n",
                  "label": "Group size",
                  "type": "number"
                }
              ],
              "click": null,
              "icon": "RiGroupFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "n": "100000"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1783.4009957734522,
            "y": 1146.999980702065
          },
          "__class__": "Node"
        },
        {
          "id": "4aa14f93-cd87-459c-8805-c3ddb3cd6db2",
          "position": {
            "x": 972.8501586037869,
            "y": 462.8945225671141
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "pname": "imbalanced_data_extension",
            "fsdao": {
              "daos": {
                "data": {
                  "data": {
                    "value": {
                      "base": "/home/loko/loko",
                      "hidden": {},
                      "type": null
                    }
                  }
                }
              }
            },
            "name": "Imbalanced Data",
            "events": null,
            "description": "#### Imbalanced Data",
            "inputs": [
              {
                "id": "balancing",
                "label": "Balancing",
                "service": "balance",
                "to": "balancing"
              }
            ],
            "outputs": [
              {
                "id": "balancing",
                "label": "Balancing",
                "closed": false
              }
            ],
            "configured": true,
            "options": {
              "group": "Custom",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "target",
                  "type": "text",
                  "label": "Target Variable Name",
                  "helper": "",
                  "group": "",
                  "value": "target",
                  "description": "",
                  "validation": null
                },
                {
                  "name": "method",
                  "type": "select",
                  "label": "Sampling Method",
                  "helper": "",
                  "group": "",
                  "value": "undersampling",
                  "description": "",
                  "validation": null,
                  "options": [
                    "undersampling",
                    "oversampling",
                    "SMOTE",
                    "SMOTEN"
                  ]
                },
                {
                  "name": "random_state",
                  "type": "number",
                  "label": "Random State",
                  "helper": "",
                  "group": "",
                  "value": 123,
                  "description": "",
                  "validation": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"undersampling\"",
                  "dynamicType": "select",
                  "options": [
                    "auto",
                    "majority",
                    "not majority",
                    "not minority",
                    "all"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "replacement",
                  "type": "dynamic",
                  "label": "Sample with raplacement",
                  "helper": "",
                  "group": "",
                  "value": false,
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"undersampling\"",
                  "dynamicType": "boolean",
                  "options": null,
                  "fields": null,
                  "url": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"oversampling\"",
                  "dynamicType": "select",
                  "options": [
                    "all",
                    "auto",
                    "not minority",
                    "not majority",
                    "minority"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTE\"",
                  "dynamicType": "select",
                  "options": [
                    "all",
                    "auto",
                    "not minority",
                    "not majority",
                    "minority"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "k_neighbors",
                  "type": "dynamic",
                  "label": "K neighbors",
                  "helper": "",
                  "group": "",
                  "value": 5,
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTE\"",
                  "dynamicType": "number",
                  "options": null,
                  "fields": null,
                  "url": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTEN\"",
                  "dynamicType": "select",
                  "options": [
                    "all",
                    "auto",
                    "not minority",
                    "not majority",
                    "minority"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "k_neighbors",
                  "type": "dynamic",
                  "label": "K neighbors",
                  "helper": "",
                  "group": "",
                  "value": 5,
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTEN\"",
                  "dynamicType": "number",
                  "options": null,
                  "fields": null,
                  "url": null
                }
              ],
              "click": null,
              "icon": "RiScales3Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "target": "target",
                "method": "SMOTEN",
                "random_state": "123",
                "sampling_strategy": "auto",
                "k_neighbors": "5"
              }
            }
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 972.8501586037869,
            "y": 462.8945225671141
          },
          "__class__": "Node"
        },
        {
          "id": "b8bbd707-5424-4f09-85a1-ad705a7814b0",
          "position": {
            "x": 595,
            "y": 138
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "fsdao": {
              "daos": {
                "data": {
                  "data": {
                    "value": {
                      "base": "/home/loko/loko",
                      "hidden": {},
                      "type": null
                    }
                  }
                }
              }
            },
            "name": "Imbalanced Data",
            "events": null,
            "description": "\n### Description\n\nBalancing a dataset makes training a model easier as it mitigates the risk of the model becoming biased towards a particular class. Imbalanced Data is the LOKO AI block designed to balance your data before passing it to the Predictor block. If you intend to link the Imbalanced Data component to a Predictor, note that you have to untoggle the stream button in the latter component settings.\n\nThis components it's based on the ImbalancedLearn python library, check their documentation if you want to know more https://imbalanced-learn.org/stable/references/index.html#api.\nThis component is based on the ImbalancedLearn python library. You can check their documentation to learn more: [Imbalanced Learn API](https://imbalanced-learn.org/stable/references/index.html#api).\n\n\n### How to use it\n\n\nYou can balance your dataset by passing the CSVReader content to the Grouper component (setting a high number in the \"Group size\") and then linking its output to the \"Balancing\" input of the Imbalanced Data component.\n\n### Settings\n\n\nThis block includes several fields to be set:\n\n- **Target Variable Name**: By default, the value is \"target,\" representing the name of the variable to consider as the target for sampling.\n- **Sampling Method**: Choose among the 4 available sampling methods - undersampling, oversampling, SMOTE (Synthetic Minority Oversampling Technique), and SMOTEN (Synthetic Minority Over-sampling Technique for Nominal). The default method used is undersampling.\n- **Random State**: You can set the random state to use.\n\nAmong the field to set in this block, we have the **Target Variable Name**, which by default the value is \"target\", that represent the name of the variable to consider as target for the sampling. Then we have to choose among the 4 sampling methods available undersampling, oversampling, SMOTE, namely Synthetic Minority Oversampling Technique, and SMOTEN (Synthetic Minority Over-sampling Technique for Nominal). The default method used is undersampling. It's possible to set also the **Random State** to use.\n\n\n\n\nBased on the chosen sampling strategy, you may find other fields:\n\n- **Sampling Strategy**: This field is present independently of the chosen sampling method. It represents the resampling strategy to adopt. For example, choosing \"minority\" will imply resampling only the minority class, \"not minority\" will resample all classes except the minority, and so on.\n- **k_neighbors**: This value can be set only for the synthetic-based techniques (i.e., \"SMOTE,\" \"SMOTEN\"), and it represents the number of nearest neighbors used to define the neighborhood of samples used to generate the synthetic samples.\n- **Sample with replacement**: This field is available to be set only for the \"undersampling\" method. If toggled, the sample will be with replacement of the extracted sample; otherwise, without.\n\n\n\n",
            "inputs": [
              {
                "id": "balancing",
                "label": "Balancing",
                "service": "balance",
                "to": "balancing"
              }
            ],
            "outputs": [
              {
                "id": "balancing",
                "label": "Balancing"
              }
            ],
            "configured": true,
            "options": {
              "group": "Custom",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "target",
                  "type": "text",
                  "label": "Target Variable Name",
                  "helper": "",
                  "group": "",
                  "value": "target",
                  "description": "",
                  "validation": null
                },
                {
                  "name": "method",
                  "type": "select",
                  "label": "Sampling Method",
                  "helper": "",
                  "group": "",
                  "value": "undersampling",
                  "description": "",
                  "validation": null,
                  "options": [
                    "undersampling",
                    "oversampling",
                    "SMOTE",
                    "SMOTEN"
                  ]
                },
                {
                  "name": "random_state",
                  "type": "number",
                  "label": "Random State",
                  "helper": "",
                  "group": "",
                  "value": 123,
                  "description": "",
                  "validation": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"undersampling\"",
                  "dynamicType": "select",
                  "options": [
                    "auto",
                    "majority",
                    "not majority",
                    "not minority",
                    "all"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "replacement",
                  "type": "dynamic",
                  "label": "Sample with raplacement",
                  "helper": "",
                  "group": "",
                  "value": false,
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"undersampling\"",
                  "dynamicType": "boolean",
                  "options": null,
                  "fields": null,
                  "url": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"oversampling\"",
                  "dynamicType": "select",
                  "options": [
                    "all",
                    "auto",
                    "not minority",
                    "not majority",
                    "minority"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTE\"",
                  "dynamicType": "select",
                  "options": [
                    "all",
                    "auto",
                    "not minority",
                    "not majority",
                    "minority"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "k_neighbors",
                  "type": "dynamic",
                  "label": "K neighbors",
                  "helper": "",
                  "group": "",
                  "value": 5,
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTE\"",
                  "dynamicType": "number",
                  "options": null,
                  "fields": null,
                  "url": null
                },
                {
                  "name": "sampling_strategy",
                  "type": "dynamic",
                  "label": "Sampling Strategy",
                  "helper": "",
                  "group": "",
                  "value": "auto",
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTEN\"",
                  "dynamicType": "select",
                  "options": [
                    "all",
                    "auto",
                    "not minority",
                    "not majority",
                    "minority"
                  ],
                  "fields": null,
                  "url": null
                },
                {
                  "name": "k_neighbors",
                  "type": "dynamic",
                  "label": "K neighbors",
                  "helper": "",
                  "group": "",
                  "value": 5,
                  "description": "",
                  "validation": null,
                  "parent": "method",
                  "condition": "{parent}==\"SMOTEN\"",
                  "dynamicType": "number",
                  "options": null,
                  "fields": null,
                  "url": null
                }
              ],
              "click": null,
              "icon": "RiScales3Fill",
              "values": {
                "target": "target",
                "method": "undersampling",
                "random_state": 123,
                "sampling_strategy": "auto",
                "k_neighbors": 5
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "__class__": "Node"
        }
      ],
      "edges": [
        {
          "id": "reactflow__edge-c52f1de4-d75d-4796-84d3-cb395936e12doutput-e31c24ca-9a95-4c07-889f-b17ee531eb65balancing",
          "source": "c52f1de4-d75d-4796-84d3-cb395936e12d",
          "sourceHandle": "output",
          "target": "e31c24ca-9a95-4c07-889f-b17ee531eb65",
          "targetHandle": "balancing",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-dfb7d559-1b5e-4364-bdac-6bbee9c74888output-007df25a-0c9d-4e92-a652-919b5f62684dinput",
          "source": "dfb7d559-1b5e-4364-bdac-6bbee9c74888",
          "sourceHandle": "output",
          "target": "007df25a-0c9d-4e92-a652-919b5f62684d",
          "targetHandle": "input",
          "data": {
            "startColor": "#F8637A",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-2a92af27-18ad-4281-8def-731c1b7a5c1foutput-fe718156-005e-4764-b172-df0a3f4cb425balancing",
          "source": "2a92af27-18ad-4281-8def-731c1b7a5c1f",
          "sourceHandle": "output",
          "target": "fe718156-005e-4764-b172-df0a3f4cb425",
          "targetHandle": "balancing",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-fe718156-005e-4764-b172-df0a3f4cb425balancing-2ea32ed5-f0ae-4465-8955-2d86d6d01707fit",
          "source": "fe718156-005e-4764-b172-df0a3f4cb425",
          "sourceHandle": "balancing",
          "target": "2ea32ed5-f0ae-4465-8955-2d86d6d01707",
          "targetHandle": "fit",
          "data": {
            "startColor": "#888",
            "stopColor": "#FFB300"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-f85db464-7c7d-47cb-8cad-5846a1d089ecoutput-36d9b62d-bad7-4e7b-a04b-d1ac9ed39f0finput",
          "source": "f85db464-7c7d-47cb-8cad-5846a1d089ec",
          "sourceHandle": "output",
          "target": "36d9b62d-bad7-4e7b-a04b-d1ac9ed39f0f",
          "targetHandle": "input",
          "data": {
            "startColor": "#F8637A",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-36d9b62d-bad7-4e7b-a04b-d1ac9ed39f0foutput-2a92af27-18ad-4281-8def-731c1b7a5c1finput",
          "source": "36d9b62d-bad7-4e7b-a04b-d1ac9ed39f0f",
          "sourceHandle": "output",
          "target": "2a92af27-18ad-4281-8def-731c1b7a5c1f",
          "targetHandle": "input",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-d46c0e1c-bb27-4ac5-9635-58619184e647output-e60b13a1-3f6f-4a85-a938-ca7b1b34b806input",
          "source": "d46c0e1c-bb27-4ac5-9635-58619184e647",
          "sourceHandle": "output",
          "target": "e60b13a1-3f6f-4a85-a938-ca7b1b34b806",
          "targetHandle": "input",
          "data": {
            "startColor": "#F8637A",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-2ea32ed5-f0ae-4465-8955-2d86d6d01707evaluate-6bd13d00-6501-404d-a4da-cb18c32b4f35input",
          "source": "2ea32ed5-f0ae-4465-8955-2d86d6d01707",
          "sourceHandle": "evaluate",
          "target": "6bd13d00-6501-404d-a4da-cb18c32b4f35",
          "targetHandle": "input",
          "data": {
            "startColor": "#FFB300",
            "stopColor": "#56DCB9"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "1fd25f1c-1cbe-4301-96d9-9cb400a4c3ef",
          "source": "26d2f664-6001-44b6-b8c9-cc45d5f56220",
          "sourceHandle": "output",
          "target": "bd35b6a0-ce50-4c1c-a48c-a16cafe99d17",
          "targetHandle": "input",
          "data": {
            "startColor": "#F8637A",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-c4111051-5fea-461e-9428-b018eae1585coutput-be1ab6ee-9ca8-423e-9579-fa2cb773ec8ainput",
          "source": "c4111051-5fea-461e-9428-b018eae1585c",
          "sourceHandle": "output",
          "target": "be1ab6ee-9ca8-423e-9579-fa2cb773ec8a",
          "targetHandle": "input",
          "data": {
            "startColor": "#F8637A",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-be1ab6ee-9ca8-423e-9579-fa2cb773ec8aoutput-fd716ad7-6c02-469b-8faf-1b85d64a8c92input",
          "source": "be1ab6ee-9ca8-423e-9579-fa2cb773ec8a",
          "sourceHandle": "output",
          "target": "fd716ad7-6c02-469b-8faf-1b85d64a8c92",
          "targetHandle": "input",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-fd716ad7-6c02-469b-8faf-1b85d64a8c92output-c3196c16-80e5-414e-b660-4702a7557c66evaluate",
          "source": "fd716ad7-6c02-469b-8faf-1b85d64a8c92",
          "sourceHandle": "output",
          "target": "c3196c16-80e5-414e-b660-4702a7557c66",
          "targetHandle": "evaluate",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#FFB300"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-e60b13a1-3f6f-4a85-a938-ca7b1b34b806output-2ea32ed5-f0ae-4465-8955-2d86d6d01707evaluate",
          "source": "e60b13a1-3f6f-4a85-a938-ca7b1b34b806",
          "sourceHandle": "output",
          "target": "2ea32ed5-f0ae-4465-8955-2d86d6d01707",
          "targetHandle": "evaluate",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#FFB300"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-bd35b6a0-ce50-4c1c-a48c-a16cafe99d17output-c3196c16-80e5-414e-b660-4702a7557c66fit",
          "source": "bd35b6a0-ce50-4c1c-a48c-a16cafe99d17",
          "sourceHandle": "output",
          "target": "c3196c16-80e5-414e-b660-4702a7557c66",
          "targetHandle": "fit",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#FFB300"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-007df25a-0c9d-4e92-a652-919b5f62684doutput-4aa14f93-cd87-459c-8805-c3ddb3cd6db2balancing",
          "source": "007df25a-0c9d-4e92-a652-919b5f62684d",
          "sourceHandle": "output",
          "target": "4aa14f93-cd87-459c-8805-c3ddb3cd6db2",
          "targetHandle": "balancing",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-4aa14f93-cd87-459c-8805-c3ddb3cd6db2balancing-fa3ace84-a325-46a7-a66c-b769a2dc13d6fit",
          "source": "4aa14f93-cd87-459c-8805-c3ddb3cd6db2",
          "sourceHandle": "balancing",
          "target": "fa3ace84-a325-46a7-a66c-b769a2dc13d6",
          "targetHandle": "fit",
          "data": {
            "startColor": "#888",
            "stopColor": "#FFB300"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        }
      ],
      "__class__": "Graph"
    }
  },
  "open": [
    "main"
  ],
  "active": "main",
  "version": "1.0.0",
  "__class__": "Project"
}